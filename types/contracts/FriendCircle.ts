/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FriendCircleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPost"
      | "getEncryptedLikeCount"
      | "getEncryptedTipTotal"
      | "getPost"
      | "grantDecryptForPost"
      | "hasLiked"
      | "like"
      | "likeFeeWei"
      | "postCount"
      | "protocolId"
      | "tip"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Liked" | "PostCreated" | "Tipped"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createPost",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedLikeCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTipTotal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantDecryptForPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLiked",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "like",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "likeFeeWei",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "postCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tip", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedLikeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTipTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantDecryptForPost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasLiked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "likeFeeWei", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
}

export namespace LikedEvent {
  export type InputTuple = [
    postId: BigNumberish,
    user: AddressLike,
    feeWei: BigNumberish
  ];
  export type OutputTuple = [postId: bigint, user: string, feeWei: bigint];
  export interface OutputObject {
    postId: bigint;
    user: string;
    feeWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostCreatedEvent {
  export type InputTuple = [postId: BigNumberish, author: AddressLike];
  export type OutputTuple = [postId: bigint, author: string];
  export interface OutputObject {
    postId: bigint;
    author: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TippedEvent {
  export type InputTuple = [
    postId: BigNumberish,
    from: AddressLike,
    amountWei: BigNumberish
  ];
  export type OutputTuple = [postId: bigint, from: string, amountWei: bigint];
  export interface OutputObject {
    postId: bigint;
    from: string;
    amountWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FriendCircle extends BaseContract {
  connect(runner?: ContractRunner | null): FriendCircle;
  waitForDeployment(): Promise<this>;

  interface: FriendCircleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPost: TypedContractMethod<
    [text: string, ipfsHash: string],
    [bigint],
    "nonpayable"
  >;

  getEncryptedLikeCount: TypedContractMethod<
    [postId: BigNumberish],
    [string],
    "view"
  >;

  getEncryptedTipTotal: TypedContractMethod<
    [postId: BigNumberish],
    [string],
    "view"
  >;

  getPost: TypedContractMethod<
    [postId: BigNumberish],
    [
      [string, string, string, bigint] & {
        author: string;
        text: string;
        ipfsHash: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  grantDecryptForPost: TypedContractMethod<
    [postId: BigNumberish],
    [void],
    "nonpayable"
  >;

  hasLiked: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  like: TypedContractMethod<
    [postId: BigNumberish, encOne: BytesLike, inputProof: BytesLike],
    [void],
    "payable"
  >;

  likeFeeWei: TypedContractMethod<[], [bigint], "view">;

  postCount: TypedContractMethod<[], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  tip: TypedContractMethod<[postId: BigNumberish], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPost"
  ): TypedContractMethod<
    [text: string, ipfsHash: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEncryptedLikeCount"
  ): TypedContractMethod<[postId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedTipTotal"
  ): TypedContractMethod<[postId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPost"
  ): TypedContractMethod<
    [postId: BigNumberish],
    [
      [string, string, string, bigint] & {
        author: string;
        text: string;
        ipfsHash: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantDecryptForPost"
  ): TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasLiked"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "like"
  ): TypedContractMethod<
    [postId: BigNumberish, encOne: BytesLike, inputProof: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "likeFeeWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "postCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tip"
  ): TypedContractMethod<[postId: BigNumberish], [void], "payable">;

  getEvent(
    key: "Liked"
  ): TypedContractEvent<
    LikedEvent.InputTuple,
    LikedEvent.OutputTuple,
    LikedEvent.OutputObject
  >;
  getEvent(
    key: "PostCreated"
  ): TypedContractEvent<
    PostCreatedEvent.InputTuple,
    PostCreatedEvent.OutputTuple,
    PostCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Tipped"
  ): TypedContractEvent<
    TippedEvent.InputTuple,
    TippedEvent.OutputTuple,
    TippedEvent.OutputObject
  >;

  filters: {
    "Liked(uint256,address,uint256)": TypedContractEvent<
      LikedEvent.InputTuple,
      LikedEvent.OutputTuple,
      LikedEvent.OutputObject
    >;
    Liked: TypedContractEvent<
      LikedEvent.InputTuple,
      LikedEvent.OutputTuple,
      LikedEvent.OutputObject
    >;

    "PostCreated(uint256,address)": TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;
    PostCreated: TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;

    "Tipped(uint256,address,uint256)": TypedContractEvent<
      TippedEvent.InputTuple,
      TippedEvent.OutputTuple,
      TippedEvent.OutputObject
    >;
    Tipped: TypedContractEvent<
      TippedEvent.InputTuple,
      TippedEvent.OutputTuple,
      TippedEvent.OutputObject
    >;
  };
}
